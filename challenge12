#!/usr/bin/env python3.6
from __future__ import print_function
from sys import exit
import sys
import codecs
import urllib
import urllib.request


def unpad(to_unpad):
    return to_unpad[0:-to_unpad[-1]]


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def xor_for_char(input_bytes, key_input):
    index = 0
    output_bytes = b''
    for byte in input_bytes:
        if index >= len(key_input):
            index = 0
        output_bytes += bytes([byte ^ key_input[index]])
        index += 1
    return output_bytes


COOKIES = {}
def school_encryption(data):
    data = codecs.encode(codecs.encode(data), 'base64')
    req = urllib.request.Request('http://127.0.0.1:5000/challenge12', method='POST', data=data, headers={'Content-Type': 'text/plain'})
    if COOKIES:
        req.add_header('Cookie', ';'.join(key+'='+COOKIES[key] for key in COOKIES))
    r = urllib.request.urlopen(req)
    for header in r.getheaders():
        if header[0] == 'Set-Cookie':
            cookie = header[1].split('; ')[0].split('=', 1)
            COOKIES[cookie[0]] = cookie[1]
    to_return = r.read()
    if len(to_return) == 0:
        sys.exit(84)
    return codecs.decode(to_return, 'base64')


def bruteforce_aes(block, length, blen):
    i = 0
    pos = block
    todecrypt = school_encryption("A" * length)
    found = ''
    while i < blen * length:
        for x in range(0, 256):
            if x == 255:
                found = found[0:len(found) - 1]
                return codecs.encode(found)
            mystring = "A" * ((length) - i) + found + chr(x)
            to_compare = school_encryption(mystring)
            if to_compare[pos * blen:blen * pos + blen] == todecrypt[pos * blen:blen * pos + blen]:
                found = found + chr(x)
                i += 1
                string_toencrypt = "A" * (length - i)
                todecrypt = school_encryption(string_toencrypt)
                break
    return found

def find_block_len():
    length = len(school_encryption(""))
    len_with_pad = length
    pad = 0
    while 1:
        if len_with_pad > length:
            return len_with_pad - length
        len_with_pad = len(school_encryption("A" * pad))
        pad = pad + 1

# this function just tells that i'll add  as many characters as there are in the encrypted string
# doing that, i'll always have enough lenght (even if there's no prefix for exemple)
def calculate_padding_length(blen):
    encrypted = school_encryption("")
    basic_length = (int)(len(encrypted) / blen)
    return basic_length * blen

def find_suffix(padding_needed, blen):
    todecrypt = school_encryption("A" * (padding_needed))
    #starting from the first block I remove blen of padding
    #if the string is the same it means that i'm on the prefix or that i'm too far from the suffix
    #if the string ain't the same ten it'll be the first block i can pad attack on
    for block in range((int)(len(todecrypt) / blen)):
        for x in range(17):
            to_compare = school_encryption("A" * (padding_needed - x))
            if to_compare[block * blen:blen * block + blen] != todecrypt[block * blen:blen * block + blen]:
                #once I found a difference in a block I start the bruteforce
                print(codecs.decode(codecs.encode(bruteforce_aes(block, padding_needed - x, blen), 'base64')).replace('\n', ''))
                exit(0)

def preparation_for_bruteforce():
    blen = find_block_len()
    padding_needed = calculate_padding_length(blen)
    find_suffix(padding_needed, blen)


def main():
    preparation_for_bruteforce()


if __name__== "__main__":
    try:
        main()
    except Exception as e:
        eprint(e)
        sys.exit(84)
    sys.exit(0)

